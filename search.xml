<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Median Of Two Sorted Arrays</title>
    <url>/2020/05/14/Median-Of-Two-Sorted-Arrays/</url>
    <content><![CDATA[<h3 id="Question"><a href="#Question" class="headerlink" title="Question"></a>Question</h3><blockquote><p>There are two sorted arrays nums1 and nums2 of size m and n respectively. Find the median of the two sorted arrays. The overall run time complexity should be O(log (m+n)).</p>
<p>You may assume nums1 and nums2 cannot be both empty.<br>Example 1:<br>nums1 = [1, 3]<br>nums2 = [2]<br>The median is 2.0</p>
<footer><strong>LeetCode</strong><cite><a href="https://leetcode.com/problems/median-of-two-sorted-arrays/" target="_blank" rel="noopener">leetcode.com/problems/median-of-two-sorted-arrays</a></cite></footer></blockquote>
<h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">@param: int[] nums1, int[] nums2: input two sorted array;</span></span><br><span class="line"><span class="comment">@return: median.</span></span><br><span class="line"><span class="comment">Algorithm: can be expended to find kth smallest element in two sorted array;</span></span><br><span class="line"><span class="comment">in this case, median is k/2;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">findMedianSortedArrays</span><span class="params">(<span class="keyword">int</span>[] nums1, <span class="keyword">int</span>[] nums2)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//corner case</span></span><br><span class="line">    <span class="keyword">if</span> (nums1.length == <span class="number">0</span> &amp;&amp; nums2.length == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> k = nums1.length + nums2.length;</span><br><span class="line">    <span class="keyword">if</span> (k % <span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> (findKthNumber(nums1, <span class="number">0</span>, nums2, <span class="number">0</span>, k/<span class="number">2</span>) +</span><br><span class="line">                findKthNumber(nums1, <span class="number">0</span>, nums2, <span class="number">0</span>, k/<span class="number">2</span>+<span class="number">1</span>)) / <span class="number">2.0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> findKthNumber(nums1, <span class="number">0</span>, nums2, <span class="number">0</span>, k/<span class="number">2</span>+<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//find kth Number not index, index should be k-1;</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">findKthNumber</span><span class="params">(<span class="keyword">int</span>[] A, <span class="keyword">int</span> startOfA,</span></span></span><br><span class="line"><span class="function"><span class="params">                         <span class="keyword">int</span>[] B, <span class="keyword">int</span> startOfB,</span></span></span><br><span class="line"><span class="function"><span class="params">                         <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (startOfA &gt;= A.length) &#123;</span><br><span class="line">        <span class="keyword">return</span> B[startOfB + k-<span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (startOfB &gt;= B.length) &#123;</span><br><span class="line">        <span class="keyword">return</span> A[startOfA + k-<span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// should consider last case;</span></span><br><span class="line">    <span class="keyword">if</span> (k == <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> Math.min(A[startOfA], B[startOfB]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> halfOfA = (startOfA + k/<span class="number">2</span>-<span class="number">1</span> &gt;= A.length) ? Integer.MAX_VALUE : A[startOfA + k/<span class="number">2</span>-<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">int</span> halfOfB = (startOfB + k/<span class="number">2</span>-<span class="number">1</span> &gt;= B.length) ? Integer.MAX_VALUE : B[startOfB + k/<span class="number">2</span>-<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// be careful here, start should be index + number(not index),</span></span><br><span class="line">    <span class="comment">// next k should be k - k/2 (not k/2);</span></span><br><span class="line">    <span class="keyword">if</span> (halfOfA &lt; halfOfB) &#123;</span><br><span class="line">        <span class="keyword">return</span> findKthNumber(A, startOfA + k/<span class="number">2</span>, B, startOfB, k - k/<span class="number">2</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> findKthNumber(A, startOfA, B, startOfB + k/<span class="number">2</span>, k - k/<span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>LeetCode</category>
        <category>Array</category>
      </categories>
      <tags>
        <tag>Array</tag>
        <tag>Kth</tag>
      </tags>
  </entry>
  <entry>
    <title>3Sum</title>
    <url>/2020/05/14/3Sum/</url>
    <content><![CDATA[<h3 id="Question"><a href="#Question" class="headerlink" title="Question"></a>Question</h3><blockquote><p>Given an array nums of n integers, are there elements a, b, c in nums such that a + b + c = 0? Find all unique triplets in the array which gives the sum of zero.<br>Note:<br>The solution set must not contain duplicate triplets.<br>Example:<br>Given array nums = [-1, 0, 1, 2, -1, -4],<br>A solution set is:<br>[<br>  [-1, 0, 1],<br>  [-1, -1, 2]<br>]</p>
<footer><strong>LeetCode</strong><cite><a href="https://leetcode.com/problems/3sum/" target="_blank" rel="noopener">leetcode.com/problems/3sum</a></cite></footer></blockquote>

<h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Algorithm: First, get two sum by 0 - nums[index];</span></span><br><span class="line"><span class="comment">then, similarly solve two sum problem;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; threeSum(<span class="keyword">int</span>[] nums) &#123;</span><br><span class="line">    List&lt;List&lt;Integer&gt;&gt; result = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="keyword">if</span> (nums.length &lt; <span class="number">3</span>) <span class="keyword">return</span> result;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//[-1, 0, 1, 2, -1, -4]</span></span><br><span class="line">    Arrays.sort(nums);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length - <span class="number">2</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (i &gt; <span class="number">0</span> &amp;&amp; nums[i] == nums[i-<span class="number">1</span>]) &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> target = <span class="number">0</span> - nums[i];        </span><br><span class="line">        <span class="keyword">int</span> left = i + <span class="number">1</span>, right = nums.length - <span class="number">1</span>;            </span><br><span class="line">        CalculateTwoSum(nums, target, left, right, result);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">CalculateTwoSum</span><span class="params">(<span class="keyword">int</span>[] nums,</span></span></span><br><span class="line"><span class="function"><span class="params">                            <span class="keyword">int</span> target,</span></span></span><br><span class="line"><span class="function"><span class="params">                            <span class="keyword">int</span> left, </span></span></span><br><span class="line"><span class="function"><span class="params">                            <span class="keyword">int</span> right, </span></span></span><br><span class="line"><span class="function"><span class="params">                            List&lt;List&lt;Integer&gt;&gt; result)</span> </span>&#123;        </span><br><span class="line">    <span class="keyword">while</span> (left &lt; right) &#123;            </span><br><span class="line">        <span class="keyword">if</span> (nums[left] + nums[right] == target) &#123;</span><br><span class="line">            List&lt;Integer&gt; candidate = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">            candidate.add(-target);</span><br><span class="line">            candidate.add(nums[left]);</span><br><span class="line">            candidate.add(nums[right]);                                        </span><br><span class="line">            result.add(candidate);</span><br><span class="line">            left++;</span><br><span class="line">            right--;</span><br><span class="line">            <span class="keyword">while</span> (left &lt; right &amp;&amp; nums[left] == nums[left-<span class="number">1</span>]) &#123;</span><br><span class="line">                left++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">while</span> (left &lt; right &amp;&amp; nums[right] == nums[right+<span class="number">1</span>]) &#123;</span><br><span class="line">                right--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span> (nums[left] + nums[right] &lt; target) &#123;</span><br><span class="line">            left++;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            right--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;        </span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>LeetCode</category>
        <category>Array</category>
      </categories>
      <tags>
        <tag>Sum</tag>
      </tags>
  </entry>
  <entry>
    <title>Task Scheduler</title>
    <url>/2020/05/14/Task-Scheduler/</url>
    <content><![CDATA[<h3 id="Question"><a href="#Question" class="headerlink" title="Question"></a>Question</h3><blockquote><p>Given a char array representing tasks CPU need to do. It contains capital letters A to Z where different letters represent different tasks. Tasks could be done without original order. Each task could be done in one interval. For each interval, CPU could finish one task or just be idle.</p>
<p>However, there is a non-negative cooling interval n that means between two same tasks, there must be at least n intervals that CPU are doing different tasks or just be idle.</p>
<p>You need to return the least number of intervals the CPU will take to finish all the given tasks.</p>
<p>Example:<br>Input: tasks = [“A”,”A”,”A”,”B”,”B”,”B”], n = 2<br>Output: 8<br>Explanation: A -&gt; B -&gt; idle -&gt; A -&gt; B -&gt; idle -&gt; A -&gt; B.</p>
<footer><strong>LeetCode</strong><cite><a href="https://leetcode.com/problems/task-scheduler/" target="_blank" rel="noopener">leetcode.com/problems/task-scheduler</a></cite></footer></blockquote>
<h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">A math problem, what matter is numbers of letter that counts most;</span></span><br><span class="line"><span class="comment">AAABBB</span></span><br><span class="line"><span class="comment">A~~A~~AB</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">leastInterval</span><span class="params">(<span class="keyword">char</span>[] tasks, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (tasks.length &lt;= <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> tasks.length;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span>[] num = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">26</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">char</span> t : tasks) &#123;</span><br><span class="line">        num[t-<span class="string">'A'</span>]++;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    Arrays.sort(num);</span><br><span class="line">    <span class="comment">// calculater numbers of letter that counts most; in this case, 2;</span></span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">25</span>;</span><br><span class="line">    <span class="keyword">while</span> (i &gt;= <span class="number">0</span> &amp;&amp; num[i] == num[<span class="number">25</span>]) &#123;</span><br><span class="line">        i--;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// compare with tasks.length;</span></span><br><span class="line">    <span class="comment">// num[25]-1 is interval;</span></span><br><span class="line">    <span class="comment">// n+1 means A~~A~~, 出现次数最多的字母A，A最后一组之前的数量，</span></span><br><span class="line">    <span class="comment">//再加上与A相同的字母的数量 25-i</span></span><br><span class="line">    <span class="keyword">return</span> Math.max(tasks.length, (num[<span class="number">25</span>]-<span class="number">1</span>) * (n+<span class="number">1</span>) + <span class="number">25</span>-i);        </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>LeetCode</category>
        <category>Mathematics</category>
      </categories>
  </entry>
  <entry>
    <title>Two Sum</title>
    <url>/2020/05/14/Two-Sum/</url>
    <content><![CDATA[<h3 id="Question"><a href="#Question" class="headerlink" title="Question"></a>Question</h3><blockquote><p>Given an array of integers, return indices of the two numbers such that they add up to a specific target.</p>
<p>You may assume that each input would have exactly one solution, and you may not use the same element twice.</p>
<p>Example:<br>Given nums = [2, 7, 11, 15], target = 9,<br>Because nums[0] + nums[1] = 2 + 7 = 9,<br>return [0, 1].</p>
<footer><strong>LeetCode</strong><cite><a href="https://leetcode.com/problems/two-sum/" target="_blank" rel="noopener">leetcode.com/problems/two-sum</a></cite></footer></blockquote>

<h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">hashmap</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">int</span>[] twoSum(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> target) &#123;</span><br><span class="line">    Map&lt;Integer, Integer&gt; map = <span class="keyword">new</span> HashMap&lt;Integer, Integer&gt;();</span><br><span class="line">    <span class="keyword">for</span> ( <span class="keyword">int</span> i = <span class="number">0</span>; i&lt; nums.length; i++)&#123;</span><br><span class="line">        <span class="keyword">int</span> n = target-nums[i];</span><br><span class="line">        <span class="keyword">if</span> ( map.containsKey(n) )&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">int</span>[] &#123;map.get(n),i&#125;;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            map.put(nums[i],i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">int</span>[] &#123;&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>LeetCode</category>
        <category>Array</category>
      </categories>
      <tags>
        <tag>Sum</tag>
      </tags>
  </entry>
  <entry>
    <title>About</title>
    <url>/about/index.html</url>
    <content><![CDATA[<p>I’ve always believed in numbers, in the equations and logics that lead to reason.</p>
<p>But what truly is logic? who decides reasons?</p>
<p>It has taken me through the physical, the metaphysical, the delusional and back.</p>
<p>Ultimately, I have made the most important discovery of my career, the most important discovery of my life:</p>
<p>It is only in the mysterious equations of LOVE that any logical reasons can be found.</p>
]]></content>
  </entry>
  <entry>
    <title>Tags</title>
    <url>/tags/index.html</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>Categories</title>
    <url>/categories/index.html</url>
    <content><![CDATA[]]></content>
  </entry>
</search>
